#### Hal for my custom 7i73 based pendant ####
# mapping pendant 7i73 connections (pendant.xxx)
# to motion axis jog connections (jos-[xyz].xxx)

# !RES
setp [HMOT](CARD0).[HMOT](SSERIAL0).output-05 1

### Pendant connections ###
# Encoder
# ENCODER A   B
# ENC 0   IN8 IN9
net pendant.encoder-counts <= [HMOT](CARD0).[HMOT](SSERIAL0).enc0.count

# Display
net pendant.display-output => [HMOT](CARD0).[HMOT](SSERIAL0).display

# Axis LEDs (Key0, KEY2, KEY4)
net pendant.x.selected => [HMOT](CARD0).[HMOT](SSERIAL0).output-07
net pendant.y.selected => [HMOT](CARD0).[HMOT](SSERIAL0).output-09
net pendant.z.selected => [HMOT](CARD0).[HMOT](SSERIAL0).output-11

# Axis Buttons
net pendant.x.button <= [HMOT](CARD0).[HMOT](SSERIAL0).input-17-not
net pendant.y.button <= [HMOT](CARD0).[HMOT](SSERIAL0).input-19-not
net pendant.z.button <= [HMOT](CARD0).[HMOT](SSERIAL0).input-21-not

# Off/Jog/Step Selector
net pendant.mode-selector.off  <= [HMOT](CARD0).[HMOT](SSERIAL0).input-10-not
net pendant.mode-selector.jog  <= [HMOT](CARD0).[HMOT](SSERIAL0).input-12-not
net pendant.mode-selector.step <= [HMOT](CARD0).[HMOT](SSERIAL0).input-14-not
net pendant.mode-selector.feed <= [HMOT](CARD0).[HMOT](SSERIAL0).input-11-not
net pendant.mode-selector.spindle <= [HMOT](CARD0).[HMOT](SSERIAL0).input-13-not

# Step Scale Selector
net pendant.scale-selector.pos0 <= [HMOT](CARD0).[HMOT](SSERIAL0).input-01-not
net pendant.scale-selector.pos1 <= [HMOT](CARD0).[HMOT](SSERIAL0).input-02-not
net pendant.scale-selector.pos2 <= [HMOT](CARD0).[HMOT](SSERIAL0).input-03-not
net pendant.scale-selector.pos3 <= [HMOT](CARD0).[HMOT](SSERIAL0).input-04-not
net pendant.scale-selector.pos4 <= [HMOT](CARD0).[HMOT](SSERIAL0).input-05-not
net pendant.scale-selector.pos5 <= [HMOT](CARD0).[HMOT](SSERIAL0).input-06-not


### Motion Connections ###
#net jog.x.counts => axis.x.jog-counts
net jog.x.enable => axis.x.jog-enable
#net jog.x.scale => axis.x.jog-scale
#net jog.x.vel-mode => axis.x.jog-vel-mode

#net jog.y.counts => axis.y.jog-counts
net jog.y.enable => axis.y.jog-enable
#net jog.y.scale => axis.y.jog-scale
#net jog.y.vel-mode => axis.y.jog-vel-mode

#net jog.z.counts => axis.z.jog-counts
net jog.z.enable => axis.z.jog-enable
#net jog.z.scale => axis.z.jog-scale
#net jog.z.vel-mode => axis.z.jog-vel-mode


### Encoder counts ###
net pendant.encoder-counts => axis.x.jog-counts
net pendant.encoder-counts => axis.y.jog-counts
net pendant.encoder-counts => axis.z.jog-counts


### Axis button press to Axis selected (and led) ###
loadrt toggle names=pendant.func.x-select-tog,pendant.func.y-select-tog,pendant.func.z-select-tog

addf pendant.func.x-select-tog servo-thread
addf pendant.func.y-select-tog servo-thread
addf pendant.func.z-select-tog servo-thread

net pendant.x.button => pendant.func.x-select-tog.in
net pendant.y.button => pendant.func.y-select-tog.in
net pendant.z.button => pendant.func.z-select-tog.in

net pendant.x.selected <= pendant.func.x-select-tog.out
net pendant.y.selected <= pendant.func.y-select-tog.out
net pendant.z.selected <= pendant.func.z-select-tog.out


### Jog/Step logic ###
# jog-enable = (pendant.x.selected && (mode-selector.step | pendant.mode-selector.jog))
# vel-mode = pendant.mode-selector.jog
loadrt and2 names=pendant.func.x.and,pendant.func.y.and,pendant.func.x.and
loadrt or2 names=pendant.func.x.or,pendant.func.y.or,pendant.func.x.or

addf pendant.func.x.and servo-thread
addf pendant.func.z.and servo-thread
addf pendant.func.y.and servo-thread
addf pendant.func.x.or servo-thread
addf pendant.func.z.or servo-thread
addf pendant.func.y.or servo-thread

# mode-jog-or-step <= (mode-selector.step | pendant.mode-selector.jog)
net pendant.mode-selector.step => pendant.func.x.or.in0
net pendant.mode-selector.step => pendant.func.z.or.in0
net pendant.mode-selector.step => pendant.func.y.or.in0

net pendant.mode-selector.jog => pendant.func.x.or.in1
net pendant.mode-selector.jog => pendant.func.z.or.in1
net pendant.mode-selector.jog => pendant.func.y.or.in1

net jog.x.mode-jog-or-step <= pendant.func.x.or.out
net jog.x.mode-jog-or-step <= pendant.func.y.or.out
net jog.x.mode-jog-or-step <= pendant.func.z.or.out

# jog-enable <= (pendant.x.selected && mode-jog-or-step)
net pendant.x.selected => pendant.func.x.and.in0
net pendant.y.selected => pendant.func.z.and.in0
net pendant.z.selected => pendant.func.y.and.in0

net jog.x.mode-jog-or-step => pendant.func.x.and.in1
net jog.x.mode-jog-or-step => pendant.func.y.and.in1
net jog.x.mode-jog-or-step => pendant.func.z.and.in1

net pendant.func.x.and.out => jog.x.enable
net pendant.func.y.and.out => jog.y.enable
net pendant.func.z.and.out => jog.z.enable

# vel-mode <= pendant.mode-selector.jog
net pendant.mode-selector.jog => axis.x.jog-vel-mode
net pendant.mode-selector.jog => axis.y.jog-vel-mode
net pendant.mode-selector.jog => axis.z.jog-vel-mode


### Scale Logic ###
loadrt weighted_sum wsum_sizes=6
loadrt mux_generic config="ff7"
loadrt conv_s32_u32 names=pendant.func.scale-s32-u32

addf process_wsums servo-thread
addf mux-gen.00 servo-thread
addf pendant.func.scale-s32-u32 servo-thread

net pendant.scale-selector.pos0 => wsum.0.bit.0.in
net pendant.scale-selector.pos1 => wsum.0.bit.1.in
net pendant.scale-selector.pos2 => wsum.0.bit.2.in
net pendant.scale-selector.pos3 => wsum.0.bit.3.in
net pendant.scale-selector.pos4 => wsum.0.bit.4.in
net pendant.scale-selector.pos5 => wsum.0.bit.5.in

setp wsum.0.bit.0.weight 1
setp wsum.0.bit.1.weight 2
setp wsum.0.bit.2.weight 3
setp wsum.0.bit.3.weight 4
setp wsum.0.bit.4.weight 5
setp wsum.0.bit.5.weight 6

# position type conversion
net pendant.scale-selector.position-s32 <= wsum.0.sum
net pendant.scale-selector.position-s32 => pendant.func.scale-s32-u32.in
net pendant.scale-selector.position-u32 <= pendant.func.scale-s32-u32.out
net pendant.scale-selector.position-u32 => mux-gen.00.sel-int

# Scale amount
setp mux-gen.00.suppress-no-input 1
setp mux-gen.00.in-float-00 0
setp mux-gen.00.in-float-01 [PENDANT]SCALE_SELECTOR_POS0_STEP_SIZE
setp mux-gen.00.in-float-02 [PENDANT]SCALE_SELECTOR_POS1_STEP_SIZE
setp mux-gen.00.in-float-03 [PENDANT]SCALE_SELECTOR_POS2_STEP_SIZE
setp mux-gen.00.in-float-04 [PENDANT]SCALE_SELECTOR_POS3_STEP_SIZE
setp mux-gen.00.in-float-05 [PENDANT]SCALE_SELECTOR_POS4_STEP_SIZE
setp mux-gen.00.in-float-06 [PENDANT]SCALE_SELECTOR_POS5_STEP_SIZE

net pendant.scale-selector.selected-value <= mux-gen.00.out-float
net pendant.scale-selector.selected-value => axis.x.jog-scale
net pendant.scale-selector.selected-value => axis.y.jog-scale
net pendant.scale-selector.selected-value => axis.z.jog-scale

## LCD

#loadrt lcd fmt_strings="LinuxCNC - Tool \n X Pos = %11.4fY Pos = %11.4f Z Pos = %10.3f"
#loadrt lcd fmt_strings="LinuxCNC - Tool %2i\n%b* X Pos = %11.4f%b* Y Pos = %11.4f%b* Z Pos = %10.3f"

#loadrt lcd fmt_strings="LinuxCNC"
#loadrt lcd fmt_strings="00 00 Hello        .20 40 World        .40 14 hello        .60 54 world        ."

#addf lcd servo-thread -2

#net pendant.display.output <= lcd.00.out

setp lcd.00.contrast 1.0
#net dspx halui.axis.x.pos-commanded => lcd.00.page.00.arg.00
#net dspy halui.axis.y.pos-commanded => lcd.00.page.00.arg.01
#net dspz halui.axis.z.pos-commanded => lcd.00.page.00.arg.02



# load the lcd component
loadrt lcd fmt_strings="Tool %2d ZO %8.3f\nX Pos = %8.3f\nY Pos = %8.3f\nZ Pos = %8.3f|Line = %5d\nLength = %5d\nProgress = %3.1f | \n Machine in ESTOP| \n Machine ON\n but not homed"

# add the component to a thread, otherwise it will never be updated
addf lcd servo-thread

#setp lcd.00.decimal-separator 44

net pendant.display.output <= lcd.00.out

net current-tool-number => lcd.00.page.00.arg.00
net tooloffset-z motion.tooloffset.z => lcd.00.page.00.arg.01
net x-pos lcd.00.page.00.arg.02 <= halui.axis.x.pos-relative
net y-pos lcd.00.page.00.arg.03 <= halui.axis.y.pos-relative
net z-pos lcd.00.page.00.arg.04 <= halui.axis.z.pos-relative

net prog-line lcd.00.page.01.arg.00 <= gmoccapy.program.current-line
net length lcd.00.page.01.arg.01 <= gmoccapy.program.length
net progress lcd.00.page.01.arg.02 <= gmoccapy.program.progress

# page 0 page-manual
# page 1 page-auto
# page 2 page-estop
# page 3 page-on
# we need a pin to change pages according to the machine states
net page lcd.00.page_num
